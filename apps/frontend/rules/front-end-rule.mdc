---
description: Vue.js 前端開發規則 - 樣式系統與組件復用指南
globs: *.vue,*.ts,*.js
alwaysApply: true
---

# Vue.js 前端開發規則

## 樣式系統使用指南

### 1. 必須使用 [style.css](mdc:apps/frontend/src/style.css) 中定義的 CSS 變數

在開發任何 Vue 組件時，必須優先使用 `style.css` 中已定義的 CSS 變數：

#### 顏色變數

```css
/* 主色調 - 工業藍 */
--primary-50 到 --primary-900
--secondary-50 到 --secondary-900

/* 功能色調 */
--success-50, --success-500, --success-600, --success-700
--warning-50, --warning-500, --warning-600, --warning-700
--danger-50, --danger-500, --danger-600, --danger-700
--info-50, --info-500, --info-600, --info-700
```

#### 尺寸變數

```css
--header-height: 70px --sidebar-width: 280px --border-radius: 8px
  --border-radius-lg: 12px --border-radius-xl: 16px;
```

#### 陰影變數

```css
--shadow-sm, --shadow, --shadow-md, --shadow-lg, --shadow-xl
```

#### 字體變數

```css
--font-family: 'Inter', -apple-system,
  BlinkMacSystemFont... --font-size-xs 到 --font-size-4xl;
```

### 2. 使用預定義的 CSS 類別

優先使用 `style.css` 中已定義的實用類別：

#### 按鈕樣式

```html
<button class="btn btn-primary">主要按鈕</button>
<button class="btn btn-secondary">次要按鈕</button>
<button class="btn btn-success">成功按鈕</button>
<button class="btn btn-warning">警告按鈕</button>
<button class="btn btn-danger">危險按鈕</button>
<button class="btn btn-outline">外框按鈕</button>

<!-- 尺寸變體 -->
<button class="btn btn-sm btn-primary">小按鈕</button>
<button class="btn btn-lg btn-primary">大按鈕</button>
```

#### 表單樣式

```html
<div class="form-group">
  <label class="form-label">標籤</label>
  <input class="form-control" type="text" placeholder="輸入內容" />
  <div class="form-text">提示文字</div>
  <div class="form-error">錯誤訊息</div>
</div>
```

#### 卡片樣式

```html
<div class="card">
  <div class="card-header">卡片標題</div>
  <div class="card-body">卡片內容</div>
  <div class="card-footer">卡片底部</div>
</div>
```

#### 表格樣式

```html
<table class="table">
  <thead>
    <tr>
      <th>標題1</th>
      <th>標題2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>資料1</td>
      <td>資料2</td>
    </tr>
  </tbody>
</table>
```

#### 徽章樣式

```html
<span class="badge badge-primary">主要徽章</span>
<span class="badge badge-success">成功徽章</span>
<span class="badge badge-warning">警告徽章</span>
<span class="badge badge-danger">危險徽章</span>
<span class="badge badge-secondary">次要徽章</span>
```

#### 警告框樣式

```html
<div class="alert alert-info">資訊提示</div>
<div class="alert alert-success">成功提示</div>
<div class="alert alert-warning">警告提示</div>
<div class="alert alert-danger">錯誤提示</div>
```

#### 工具類別

```html
<!-- 文字對齊 -->
<div class="text-center">置中文字</div>
<div class="text-left">左對齊文字</div>
<div class="text-right">右對齊文字</div>

<!-- 文字顏色 -->
<span class="text-primary">主要顏色文字</span>
<span class="text-success">成功顏色文字</span>
<span class="text-warning">警告顏色文字</span>
<span class="text-danger">危險顏色文字</span>
<span class="text-secondary">次要顏色文字</span>

<!-- 背景顏色 -->
<div class="bg-primary">主要背景</div>
<div class="bg-success">成功背景</div>
<div class="bg-warning">警告背景</div>
<div class="bg-danger">危險背景</div>
<div class="bg-secondary">次要背景</div>

<!-- 間距 -->
<div class="mt-1 mt-2 mt-3 mt-4 mt-5">上邊距</div>
<div class="mb-1 mb-2 mb-3 mb-4 mb-5">下邊距</div>
<div class="ml-1 ml-2 ml-3 ml-4 ml-5">左邊距</div>
<div class="mr-1 mr-2 mr-3 mr-4 mr-5">右邊距</div>
<div class="p-1 p-2 p-3 p-4 p-5">內邊距</div>

<!-- 顯示方式 -->
<div class="d-none">隱藏</div>
<div class="d-block">區塊顯示</div>
<div class="d-inline">行內顯示</div>
<div class="d-inline-block">行內區塊顯示</div>
<div class="d-flex">彈性盒子</div>
<div class="d-grid">網格</div>

<!-- Flexbox 對齊 -->
<div class="d-flex justify-content-center align-items-center">置中對齊</div>
<div class="d-flex justify-content-between">兩端對齊</div>
<div class="d-flex flex-column">垂直排列</div>
<div class="d-flex flex-row">水平排列</div>

<!-- 尺寸 -->
<div class="w-100">100% 寬度</div>
<div class="h-100">100% 高度</div>

<!-- 圓角 -->
<div class="rounded">小圓角</div>
<div class="rounded-lg">大圓角</div>
<div class="rounded-xl">超大圓角</div>

<!-- 陰影 -->
<div class="shadow">標準陰影</div>
<div class="shadow-sm">小陰影</div>
<div class="shadow-md">中陰影</div>
<div class="shadow-lg">大陰影</div>
<div class="shadow-xl">超大陰影</div>
```

## 組件復用指南

### 1. 必須優先使用 [src/components](mdc:apps/frontend/src/components) 中的現有組件

在開發任何 Vue 頁面時，必須先檢查並使用 `src/components` 目錄中已存在的組件：

#### 可用的組件列表

- **PageHeader**: 頁面標題組件
- **OverviewCard**: 概覽卡片組件
- **TabNavigation**: 標籤頁導航組件
- **DataTable**: 數據表格組件
- **SearchFilters**: 搜尋和篩選控制項組件
- **StatusBadge**: 狀態徽章組件
- **Modal**: 模態框組件
- **FormField**: 表單欄位組件

### 2. 組件導入方式

```typescript
// 從 components/index.ts 導入
import {
  PageHeader,
  OverviewCard,
  TabNavigation,
  DataTable,
  SearchFilters,
  StatusBadge,
  Modal,
  FormField,
} from '@/components';
```

### 3. 組件使用範例

#### PageHeader 使用

```vue
<template>
  <PageHeader title="頁面標題" description="頁面描述">
    <template #actions>
      <button class="btn btn-primary">新增</button>
      <button class="btn btn-secondary">匯出</button>
    </template>
  </PageHeader>
</template>
```

#### OverviewCard 使用

```vue
<template>
  <div class="d-flex gap-3 mb-4">
    <OverviewCard
      icon="📊"
      :value="stats.total"
      label="總數"
      variant="primary"
    />
    <OverviewCard
      icon="✅"
      :value="stats.active"
      label="啟用"
      variant="success"
    />
    <OverviewCard
      icon="⚠️"
      :value="stats.pending"
      label="待處理"
      variant="warning"
    />
  </div>
</template>
```

#### DataTable 使用

```vue
<template>
  <DataTable :columns="columns" :data="tableData" :show-actions="true">
    <template #cell-status="{ row }">
      <StatusBadge :text="row.status" variant="success" />
    </template>

    <template #actions="{ row }">
      <button class="btn btn-sm btn-primary" @click="edit(row)">編輯</button>
      <button class="btn btn-sm btn-danger" @click="delete row">刪除</button>
    </template>
  </DataTable>
</template>
```

#### SearchFilters 使用

```vue
<template>
  <SearchFilters
    title="搜尋員工"
    :show-search="true"
    search-placeholder="搜尋姓名或工號..."
    :filters="filterOptions"
    :show-date-filter="true"
    v-model:search="searchValue"
    v-model:filter="filterValue"
    v-model:date="dateValue"
  />
</template>
```

#### FormField 使用

```vue
<template>
  <FormField
    v-model="formData.name"
    type="text"
    label="姓名"
    placeholder="請輸入姓名"
    :required="true"
    :error-message="errors.name"
  />

  <FormField
    v-model="formData.email"
    type="email"
    label="電子郵件"
    placeholder="請輸入電子郵件"
    :required="true"
    :error-message="errors.email"
  />

  <FormField
    v-model="formData.department"
    type="select"
    label="部門"
    :options="departmentOptions"
    :required="true"
    :error-message="errors.department"
  />
</template>
```

#### Modal 使用

```vue
<template>
  <Modal :show="showModal" title="編輯員工" @close="showModal = false">
    <FormField
      v-model="editForm.name"
      type="text"
      label="姓名"
      :required="true"
    />

    <template #footer>
      <button class="btn btn-outline" @click="showModal = false">取消</button>
      <button class="btn btn-primary" @click="save">儲存</button>
    </template>
  </Modal>
</template>
```

## 開發規範

### 1. 樣式規範

- **禁止** 在組件中寫入自定義 CSS 變數
- **必須** 使用 `style.css` 中已定義的變數和類別
- **優先** 使用工具類別而非自定義樣式
- **確保** 響應式設計使用預定義的斷點

### 2. 組件規範

- **優先** 使用現有組件而非重新開發
- **檢查** 組件功能是否滿足需求
- **擴展** 現有組件而非創建新組件
- **遵循** Vue 3 Composition API 最佳實踐

### 3. 代碼組織

- **保持** 組件職責單一
- **使用** TypeScript 進行類型定義
- **遵循** 現有的命名規範
- **確保** 組件可重用性

### 4. 響應式設計

- **使用** 預定義的響應式斷點
- **測試** 在不同裝置上的顯示效果
- **確保** 移動端用戶體驗

## 注意事項

1. 在創建新組件前，先檢查現有組件是否可滿足需求
2. 所有樣式必須使用 `style.css` 中定義的變數和類別
3. 組件必須支援 TypeScript 類型定義
4. 遵循 Vue 3 Composition API 的寫法
5. 確保組件的可訪問性和響應式設計
6. 使用 ESLint 和 Prettier 保持代碼風格一致
